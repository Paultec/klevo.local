<?php

namespace DoctrineORMModule\Proxy\__CG__\Register\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Register extends \Register\Entity\Register implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Register\\Entity\\Register' . "\0" . 'id', '' . "\0" . 'Register\\Entity\\Register' . "\0" . 'date', '' . "\0" . 'Register\\Entity\\Register' . "\0" . 'totalSum', '' . "\0" . 'Register\\Entity\\Register' . "\0" . 'idStoreFrom', '' . "\0" . 'Register\\Entity\\Register' . "\0" . 'idStoreTo', '' . "\0" . 'Register\\Entity\\Register' . "\0" . 'idStatus', '' . "\0" . 'Register\\Entity\\Register' . "\0" . 'idOperation', '' . "\0" . 'Register\\Entity\\Register' . "\0" . 'idPaymentType', '' . "\0" . 'Register\\Entity\\Register' . "\0" . 'idUser');
        }

        return array('__isInitialized__', '' . "\0" . 'Register\\Entity\\Register' . "\0" . 'id', '' . "\0" . 'Register\\Entity\\Register' . "\0" . 'date', '' . "\0" . 'Register\\Entity\\Register' . "\0" . 'totalSum', '' . "\0" . 'Register\\Entity\\Register' . "\0" . 'idStoreFrom', '' . "\0" . 'Register\\Entity\\Register' . "\0" . 'idStoreTo', '' . "\0" . 'Register\\Entity\\Register' . "\0" . 'idStatus', '' . "\0" . 'Register\\Entity\\Register' . "\0" . 'idOperation', '' . "\0" . 'Register\\Entity\\Register' . "\0" . 'idPaymentType', '' . "\0" . 'Register\\Entity\\Register' . "\0" . 'idUser');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Register $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', array($date));

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', array());

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setTotalSum($totalSum)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTotalSum', array($totalSum));

        return parent::setTotalSum($totalSum);
    }

    /**
     * {@inheritDoc}
     */
    public function getTotalSum()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTotalSum', array());

        return parent::getTotalSum();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdStoreFrom(\Data\Entity\Store $idStoreFrom = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdStoreFrom', array($idStoreFrom));

        return parent::setIdStoreFrom($idStoreFrom);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdStoreFrom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdStoreFrom', array());

        return parent::getIdStoreFrom();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdStoreTo(\Data\Entity\Store $idStoreTo = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdStoreTo', array($idStoreTo));

        return parent::setIdStoreTo($idStoreTo);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdStoreTo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdStoreTo', array());

        return parent::getIdStoreTo();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdStatus(\Data\Entity\Status $idStatus = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdStatus', array($idStatus));

        return parent::setIdStatus($idStatus);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdStatus', array());

        return parent::getIdStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdOperation(\Data\Entity\Operation $idOperation = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdOperation', array($idOperation));

        return parent::setIdOperation($idOperation);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdOperation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdOperation', array());

        return parent::getIdOperation();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdPaymentType(\Data\Entity\PaymentType $idPaymentType = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdPaymentType', array($idPaymentType));

        return parent::setIdPaymentType($idPaymentType);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdPaymentType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdPaymentType', array());

        return parent::getIdPaymentType();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdUser(\User\Entity\User $idUser = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdUser', array($idUser));

        return parent::setIdUser($idUser);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdUser', array());

        return parent::getIdUser();
    }

    /**
     * {@inheritDoc}
     */
    public function getArrayCopy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArrayCopy', array());

        return parent::getArrayCopy();
    }

    /**
     * {@inheritDoc}
     */
    public function populate($data = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'populate', array($data));

        return parent::populate($data);
    }

}
